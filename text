private ValidationResponse validateDMN(String content,
                                       Map<String, Object> logMap,
                                       Long requestStartTime) {
    final String method = "validateDMN";
    logMap.put(REQUEST_MESSAGE, JBPMVALIDATION_SERVICE + " : Start of " + method);
    CommonUtil.logToSplunk(JBPMVALIDATION_SERVICE, requestStartTime, logMap, splunkLogger);

    try {
        // Build and verify without deploying
        KieFileSystem kfs = KIE_SERVICES.newKieFileSystem();
        Resource dmnResource = KIE_SERVICES.getResources()
                .newByteArrayResource(content.getBytes(StandardCharsets.UTF_8))
                .setSourcePath("temp.dmn")
                .setResourceType(ResourceType.DMN);
        kfs.write(dmnResource);

        KieBuilder builder = KIE_SERVICES.newKieBuilder(kfs).buildAll();
        Results results = builder.getResults();

        if (results.hasMessages(Message.Level.ERROR)) {
            String errorMsg = collectMessages(results);
            logMap.put(ERROR_MESSAGE, JBPMVALIDATION_SERVICE + " : DMN verification failed. " + errorMsg);
            CommonUtil.logErrorToSplunk(JBPMVALIDATION_SERVICE, "", requestStartTime, logMap, splunkLogger);
            return new ValidationResponse(false, "DMN", "Invalid DMN: " + errorMsg);
        }

        // ✅ Successfully validated — no container creation
        logMap.put(RESPONSE_MESSAGE, JBPMVALIDATION_SERVICE + " : DMN validation successful.");
        CommonUtil.logToSplunk(JBPMVALIDATION_SERVICE, requestStartTime, logMap, splunkLogger);
        return new ValidationResponse(true, "DMN", "Valid DMN: no syntax or build errors.");

    } catch (Exception e) {
        String errorMsg = "Exception during DMN validation: " + e.getMessage();
        logMap.put(ERROR_MESSAGE, JBPMVALIDATION_SERVICE + " : " + errorMsg);
        CommonUtil.logErrorToSplunk(JBPMVALIDATION_SERVICE, "", requestStartTime, logMap, splunkLogger);
        return new ValidationResponse(false, "DMN", errorMsg);
    }
}
