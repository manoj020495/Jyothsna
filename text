@PostMapping(value = "/validateWorkFlow", produces = "application/json")
public Mono<ValidationResponse> validateFile(@Valid @RequestBody ValidationRequest req) {

    Long requestStartTime = System.nanoTime();
    Map<String, Object> logMap = new HashMap<>();
    logMap.put(TYPE_ALIAS, JBPM_VALIDATION_CONTROLLER);

    String requestMessage = JBPM_VALIDATION_CONTROLLER + " : Validation request for fileType=" + req.getFileType();
    logMap.put(REQUEST_MESSAGE, requestMessage);
    CommonUtil.logToSplunk(JBPM_VALIDATION_CONTROLLER, requestStartTime, logMap, splunkLogger);

    return Mono.just(req)
            .flatMap(request -> workflowValidationService.validateFile(request, logMap, requestStartTime))
            .doOnNext(response -> {
                String responseMessage = JBPM_VALIDATION_CONTROLLER + " : Validation completed successfully for type=" + req.getFileType();
                logMap.put(RESPONSE_MESSAGE, responseMessage);
                CommonUtil.logToSplunk(JBPM_VALIDATION_CONTROLLER, requestStartTime, logMap, splunkLogger);
            })
            .doOnError(error -> {
                String errorMessage = JBPM_VALIDATION_CONTROLLER + " : Validation failed for type=" + req.getFileType() + " | Error: " + error.getMessage();
                logMap.put(ERROR_MESSAGE, errorMessage);
                CommonUtil.logErrorToSplunk(JBPM_VALIDATION_CONTROLLER, "", requestStartTime, logMap, splunkLogger);
            });
}
